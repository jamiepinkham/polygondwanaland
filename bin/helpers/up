#!/usr/bin/env bash
set -euo pipefail
source "$(dirname "$(dirname "$(realpath "$0")")")/lib.sh"
MANIFEST="${1:-$(dirname "$(dirname "$(dirname "$(realpath "$0")")")")/manifest.yaml}"
ROOT_DIR="$(get_repo_root)"
echo "ROOT_DIR=$ROOT_DIR"
use_secrets=$(yq e '.castle.secrets // false' "$MANIFEST")
if [[ "$use_secrets" == "true" ]]; then
  validate_connect_env_vars
fi

require_tool yq
require_tool git
require_tool docker

# Start global services
if [[ "$(yq e '.castle.proxy.enabled' "$MANIFEST")" == "true" ]]; then
  log_info "üöÄ Starting tsdproxy..."
  docker compose -f "${ROOT_DIR}/proxy/docker-compose.yaml" up -d
fi

if [[ "$(yq e '.castle.metrics' "$MANIFEST")" == "true" ]]; then
  log_info "üìà Starting metrics stack..."
  docker compose up -f "${ROOT_DIR}/metrics/docker-compose.yaml" -d
fi

project_count=$(yq e '.castle.projects | length' "$MANIFEST")
for i in $(seq 0 $((project_count - 1))); do
  name=$(yq e ".castle.projects[$i].name" "$MANIFEST")
  path=$(resolve_source_path "$i" "$name")
  source_type=$(yq e ".castle.projects[$i].source.type" "$MANIFEST")
  compose_file=$(yq e ".castle.projects[$i].compose // \"docker-compose.yml\"" "$MANIFEST")

  env_file=$(resolve_secret "$(yq e '.castle.projects[$i].env // ""' "$MANIFEST")")
  default_port=$((4000 + i))
  expose_port=$(yq e ".castle.projects[$i].expose_port // $default_port" "$MANIFEST")
  listen_port=$(yq e ".castle.projects[$i].listen_port // $default_port" "$MANIFEST")

  if [[ "$source_type" == "git" ]]; then
    repo_url=$(yq e ".castle.projects[$i].source.url" "$MANIFEST")
    auth_type=$(yq e '.castle.projects[$i].source.auth.type // ""' "$MANIFEST")

    if [[ "$auth_type" == "oauth" ]]; then
    token=$(resolve_secret "$(yq e ".castle.projects[$i].source.auth.token" "$MANIFEST")")
    repo_url="https://oauth:${token}@${repo_url#https://}"
    elif [[ "$auth_type" == "basic" ]]; then
    user=$(resolve_secret "$(yq e ".castle.projects[$i].source.auth.username" "$MANIFEST")")
    token=$(resolve_secret "$(yq e ".castle.projects[$i].source.auth.token" "$MANIFEST")")
    repo_url="https://${user}:${token}@${repo_url#https://}"
    fi

    if [[ -d "$path" ]]; then
    log_info "üßπ Removing existing repo at $path"
    rm -rf "$path"
    fi

    branch=$(yq e ".castle.projects[$i].source.branch // \"\"" "$MANIFEST")
    [[ -n "$branch" ]] && clone_args+=("-b" "$branch")
    git clone "${clone_args[@]}" "$repo_url" "$path"
  fi
  if [[ "$source_type" == "local" || "$source_type" == "git" ]]; then
    label_args=()
    port_args=()
    log_info "üìÇ Using local path: $path"
    validate_compose_file "$path" "$compose_file"
    log_info "üîº Starting $name"
    pushd "$path" >/dev/null

    proxy_enabled=$(yq e '.castle.proxy.enabled == true' "$MANIFEST")
    if [[ "$proxy_enabled" == "true" ]]; then
      label_args+=(
        --label "tsdproxy.enable=true"
        --label "tsdproxy.name=$name"
        --label "tsdproxy.port=$listen_port"
      )
    fi
    if [[ "$expose_port" -ne 0 ]]; then
      port_args+=(-p "${expose_port}:${listen_port}")
    fi
    if [[ "$proxy_enabled" == "true" ]]; then
      docker compose -f "$compose_file" ${env_file:+--env-file "$env_file"} up -d "${label_args[@]:-}" "${port_args[@]:-}"
    else
      docker compose -f "$compose_file" ${env_file:+--env-file "$env_file"} up -d "${port_args[@]:-}"
    fi
    popd >/dev/null
  elif [[ "$source_type" == "image" ]]; then
    label_args=()
    port_args=()
    image=$(yq e ".castle.projects[$i].source.image" "$MANIFEST" | xargs)
    command=$(yq e '.castle.projects[$i].command // ""' "$MANIFEST" | xargs)
    log_info "üê≥ Running image $image for $name"

    proxy_enabled=$(yq e '.castle.proxy.enabled == true' "$MANIFEST")
    default_port=$((4000 + i))
    expose_port=$(yq e ".castle.projects[$i].expose_port // $default_port" "$MANIFEST")
    listen_port=$(yq e ".castle.projects[$i].listen_port // $default_port" "$MANIFEST")

    if [[ "$proxy_enabled" == "true" ]]; then
      label_args+=(
        --label "tsdproxy.enable=true"
        --label "tsdproxy.name=$name"
        --label "tsdproxy.port=$listen_port"
      )
    fi

    if [[ "$expose_port" -ne 0 ]]; then
      port_args+=(-p "${expose_port}:${listen_port}")
    fi
    if [[ -n "$command" ]]; then
      if [[ "$proxy_enabled" == "true" ]]; then
        docker run -d --name "$name" "${port_args[@]}" "${label_args[@]}" "$image" bash -c "$command"
      else
        docker run -d --name "$name" "${port_args[@]}" "$image"
      fi
    else
      if [[ "$proxy_enabled" == "true" ]]; then
        docker run -d --name "$name" "${port_args[@]}" "${label_args[@]}" "$image" bash -c "$command"
      else
        docker run -d --name "$name" "${port_args[@]}" "$image"
      fi
    fi
  else
    log_error "Unsupported source type: $source_type"
    exit 1
  fi
done
